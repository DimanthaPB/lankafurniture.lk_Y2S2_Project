const fs = require("fs");
const path = require("path");
const PDFDocument = require("pdfkit");
const Item = require("../Models/item");
// âž¤ Add Item
exports.addItem = async (req, res) => {
  try {
    const item = new Item(req.body);
    await item.save();
    res.status(201).json(item);
  } catch (err) {
    res.status(400).json({ error: err.message }); 
  }
};

// âž¤ Get All Items
exports.getItems = async (req, res) => {
  try {
    const items = await Item.find();
    res.json(items);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// âž¤ Update Item
exports.updateItem = async (req, res) => {
  try {
    const item = await Item.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(item);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

// âž¤ Delete Item
exports.deleteItem = async (req, res) => {
  try {
    await Item.findByIdAndDelete(req.params.id);
    res.json({ message: "Item deleted" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// âž¤ Get Low Stock Items
exports.getLowStock = async (req, res) => {
  try {
    const items = await Item.find({ quantity: { $lt: 5 } }); // threshold = 5
    res.json(items);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// âž¤ Generate Report (Summary)
exports.generateReport = async (req, res) => {
  try {
    const totalItems = await Item.countDocuments();
    const totalValue = await Item.aggregate([{ $group: { _id: null, total: { $sum: { $multiply: ["$price", "$quantity"] } } } }]);

    res.json({
      totalItems,
      totalValue: totalValue[0]?.total || 0,
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// âž¤ Generate Report PDF
exports.generateReportPDF = async (req, res) => {
  try {
    const items = await Item.find();
    const totalItems = items.length;
    const totalValue = items.reduce((acc, item) => acc + item.price * item.quantity, 0);
    const lowStockItems = items.filter(i => i.quantity < 5);

    const doc = new PDFDocument({ size: "A4", margin: 50 });
    let filename = "inventory_report.pdf";
    res.setHeader("Content-Disposition", `attachment; filename="${filename}"`);
    res.setHeader("Content-Type", "application/pdf");
    doc.pipe(res);

    // ====== Logo ======
    const logoPath = path.join(__dirname, "../assets/logo.png");
    if (fs.existsSync(logoPath)) {
      doc.image(logoPath, 50, 30, { width: 100 });
    }

    // ====== Title ======
    doc.fontSize(22).fillColor("#333").text("ðŸ“Š Inventory Report", 0, 50, { align: "center" });
    doc.moveDown(2);

    // ====== Overview Boxes ======
    const boxHeight = 50;
    const boxPadding = 10;
    const startX = 50;
    const startY = 120;
    const boxWidth = 120;

    const overviewData = [
      { label: "Total Items", value: totalItems, color: "#4CAF50" },
      { label: "Total Value", value: `Rs.${totalValue}`, color: "#2196F3" },
      { label: "Estimated Profit", value: `Rs.${(totalValue * 0.2).toFixed(2)}`, color: "#FF9800" },
      { label: "Low Stock Items", value: lowStockItems.length, color: "#F44336" },
    ];

    overviewData.forEach((item, index) => {
      const x = startX + index * (boxWidth + 10);
      doc.rect(x, startY, boxWidth, boxHeight).fill(item.color);
      doc.fillColor("#fff")
        .fontSize(12)
        .text(item.label, x + boxPadding, startY + 10, { width: boxWidth - boxPadding*2 });
      doc.fontSize(14)
        .text(item.value, x + boxPadding, startY + 25, { width: boxWidth - boxPadding*2 });
    });

    doc.moveDown(5);

    // ====== Items Table ======
    doc.fontSize(16).fillColor("#000").text("Items List", { underline: true });
    doc.moveDown(0.5);

    const tableTop = startY + boxHeight + 60;
    const itemX = 50;
    let y = tableTop;

    doc.fontSize(12);
    items.forEach((item, index) => {
      // alternate row color
      if (index % 2 === 0) {
        doc.rect(itemX, y - 2, 500, 20).fill("#f5f5f5").fillColor("#000");
      }

      doc.fillColor("#000").text(
        `${index + 1}. ${item.name} (${item.category}) - Qty: ${item.quantity}, Price: Rs.${item.price}`,
        itemX,
        y
      );
      y += 20;
    });

    // ====== Footer ======
    doc.moveDown(2);
    doc.fontSize(10).fillColor("#888").text(
      "Generated by Ceylon Sphere Inventory System",
      { align: "center" }
    );

    doc.end();
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};
// âž¤ Get Sales Data (grouped by category)
exports.getSalesData = async (req, res) => {
  try {
    const sales = await Item.aggregate([
      {
        $group: {
          _id: "$category",
          totalSales: { $sum: { $multiply: ["$price", "$quantity"] } }
        }
      }
    ]);
    res.json(sales);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};
